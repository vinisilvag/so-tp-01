RELATÓRIO

1. Termo de compromisso

Os membros do grupo afirmam que todo o código desenvolvido para este
trabalho é de autoria própria.  Exceto pelo material listado no item 3
deste relatório, os membros do grupo afirmam não ter copiado
material da Internet nem obtiveram código de terceiros.

2. Membros do grupo e alocação de esforço

Preencha as linhas abaixo com o nome e o e-mail dos integrantes do
grupo.  Substitua XX pela contribuição de cada membro do grupo no
desenvolvimento do trabalho.

Vinicius Silva Gomes   <vinicius.svgomes@gmail.com> 50%
Mirna Mendonça e Silva <mirnan21032002@gmail.com>   50%

3. Referências bibliográficas

https://linux.die.net/man/3/exec
https://man7.org/linux/man-pages/man2/dup.2.html
https://pubs.opengroup.org/onlinepubs/007904875/functions/open.html
https://www.gnu.org/software/libc/manual/html_node/Permission-Bits.html
https://pubs.opengroup.org/onlinepubs/9699919799/functions/pipe.html
https://man7.org/linux/man-pages/man2/fork.2.html
https://pubs.opengroup.org/onlinepubs/9699919799/functions/close.html#tag_16_67
https://en.wikipedia.org/wiki/Standard_streams
https://www.geeksforgeeks.org/thread-functions-in-c-c/
https://man7.org/linux/man-pages/man3/opendir.3.html
https://pubs.opengroup.org/onlinepubs/7908799/xsh/readdir.html
https://pubs.opengroup.org/onlinepubs/009604499/functions/closedir.html
https://man7.org/linux/man-pages/man2/stat.2.html
https://man7.org/linux/man-pages/man3/stat.3type.html
https://www.mkssoftware.com/docs/man5/struct_passwd.5.asp
https://pubs.opengroup.org/onlinepubs/009604499/functions/getpwuid.html
https://www.geeksforgeeks.org/basics-file-handling-c/
https://linux.die.net/man/2/kill
https://en.wikipedia.org/wiki/ANSI_escape_code

4. Estruturas de dados

Parte #1: Desenvolvimento do Shell

A primeira parte foi realizada, principalmente, seguindo as dicas
fornecidas pelo professor e pesquisando a respeito das funções sugeridas.
Desse modo, cada uma das tarefas pode ser realizada com sucesso e serão
melhor detalhadas a seguir:

Tarefa 2: Executando Comandos Simples

Nesta etapa, concentramos nossos esforços na capacidade do Shell de executar
comandos simples. Isso implica na execução de instruções como $ ls ou $ cat sh.c.
A funcionalidade foi implementada utilizando a função execvp, garantindo que a
execução ocorra apenas quando o primeiro argumento do comando não é nulo.
Durante esse processo, a estrutura execcmd foi devidamente preenchida para
possibilitar a execução eficaz dos comandos.

Tarefa 3: Redirecionamento de Entrada e Saída

Essa tarefa focou-se na implementação do redirecionamento de entrada e saída.
Utilizamos a função open para abrir o arquivo especificado em rcmd->file,
considerando as permissões indicadas em rcmd->mode. Em seguida, a função dup2
foi empregada para redirecionar o descritor de arquivo rcmd->fd para o arquivo
recém-aberto. Essa abordagem proporciona um redirecionamento preciso durante
a execução dos comandos, agregando flexibilidade à funcionalidade do Shell.

Tarefa 4: Sequenciamento de Comandos (Pipes)

Nesta tarefa implementamos a execução de comandos em sequência, introduzindo o
conceito de pipes. A criação de um pipe, com pipe(p), permitiu estabelecer uma
comunicação eficaz entre processos. Com o uso de fork(), geramos um novo processo
filho. O pai redireciona a saída padrão para a extremidade de leitura do pipe,
enquanto o filho redireciona a entrada padrão para a extremidade de gravação
do pipe. Essa abordagem facilita a execução eficiente de comandos encadeados,
enriquecendo a funcionalidade geral do Shell.

Essas implementações formam uma base sólida para o desenvolvimento contínuo do Shell,
fornecendo as funcionalidades fundamentais necessárias para o processamento de comandos
no contexto do sistema operacional.


Parte #2: Implementando um TOP

Estruturas de Dados:

Para facilitar o armazenamento dos processos para que a tabela de
seja montada, uma estrutura de dados `process` foi declarada contendo
os campos:

* pid: ID do processo
* user: usuário que é dono do processo
* name: nome do processo
* state: estado atual do processo

Funções Implementadas:

* process_list: Esta função, executada em uma thread separada, cria e
atualiza uma lista de processos continuamente. Para cada processo
identificado nos diretórios em /proc, ela coleta informações relevantes
e exibe uma tabela formatada ao final.

* send_signal: Uma função que aceita entrada do usuário para enviar sinais
a processos específicos. Esta funcionalidade é realizada em uma thread
separada, interagindo com a entrada do usuário.

* is_process: Função auxiliar que verifica se um diretório no caminho
/proc corresponde a um processo válido.

* populate_process: Função auxiliar que cria, preenche e retorna uma instância
do tipo `process` com as informações específicas do processo, que são passadas
como parâmetros.

* print_process_table: Função que exibe a tabela de processos formatada
na saída padrão.

* clear: Função que limpa a tela do terminal, proporcionando uma apresentação
mais limpa da tabela de processos. Para essa função, foram usados os `ANSI
escape sequences` para controlar a localização do cursor e limpar o terminal
adequadamente, sem que seja necessário o uso da função system (diferenciação
entre `clear` e `cls` a depender do tipo de sistema operacional).

Fluxo principal de execução:

A função `main` dispara duas threads, de modo que umaserá responsáveis por
buscar os processos e exibir a lista formatada na saída padrão e a outra
irá esperar o ID de um processo e um sinal a ser enviado para esse processo.

A função da primeira thread executa num looping infinito, limpando a tela 
e atualizando a lista de processos a cada 1 segundo. Já a função que espera
a entrada do usuário, após ser disparada, é aguardada pela `main` com a
função `pthread_join`. Uma vez que o usuário insira as informações e um
sinal válido seja enviado ao processo com PID informado, a thread termina
(caso não, ela permanece em looping até que um processo e um sinal válido
sejam digitados). Após isso, a `main` dispara a função `pthread_cancel`,
para interromper o loop da primeira thread e, com isso, encerrar a execução
de ambas. Dessa forma, todas as threads são finalizadas corretamente e não
há vazamentos de memória.
